-Big O Notation describes how the runtime(or space) of an algorithm grows as the input size increases.
-helps compare different algorithms and choose the most efficient one.

COMMON BIG O COMPLEXITIES.
    - starts from the best to the worst.

Big O            Name                       Example

O(1)            constant time               accessing an array element (arr[i])

O(log n)	    Logarithmic Time	        Binary search

O(n)	        Linear Time	                Looping through an array

O(n log n)	    Linearithmic Time	        Merge Sort, Quick Sort

O(n²)	        Quadratic Time	            Nested loops (e.g., Bubble Sort)

O(2ⁿ)	        Exponential Time	        Fibonacci (naive recursion)

O(n!)	        Factorial Time	            Traveling Salesman Problem

 ==Simplifying Big O (Ignoring Constants)
O(2n) → O(n) (Drop constants)
O(n + n²) → O(n²) (Keep the dominant term)
O(n + log n) → O(n) (n dominates log n)

 ==Space Complexity
Big O also applies to space (memory usage).
For example:

O(1) → Uses a fixed amount of space (e.g., swapping variables).
O(n) → Uses extra memory proportional to input size (e.g., creating a new array).